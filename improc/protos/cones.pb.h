// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landmarks.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cones_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cones_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cones_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cones_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cones_2eproto;
class Cone;
class ConeDefaultTypeInternal;
extern ConeDefaultTypeInternal _Cone_default_instance_;
class ConeList;
class ConeListDefaultTypeInternal;
extern ConeListDefaultTypeInternal _ConeList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Cone* Arena::CreateMaybeMessage<::Cone>(Arena*);
template<> ::ConeList* Arena::CreateMaybeMessage<::ConeList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Cone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cone) */ {
 public:
  inline Cone() : Cone(nullptr) {};
  virtual ~Cone();

  Cone(const Cone& from);
  Cone(Cone&& from) noexcept
    : Cone() {
    *this = ::std::move(from);
  }

  inline Cone& operator=(const Cone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cone& operator=(Cone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cone* internal_default_instance() {
    return reinterpret_cast<const Cone*>(
               &_Cone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cone& a, Cone& b) {
    a.Swap(&b);
  }
  inline void Swap(Cone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cone* New() const final {
    return CreateMaybeMessage<Cone>(nullptr);
  }

  Cone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cone& from);
  void MergeFrom(const Cone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cone";
  }
  protected:
  explicit Cone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cones_2eproto);
    return ::descriptor_table_cones_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
    kAngleFieldNumber = 2,
    kWidthFieldNumber = 3,
  };
  // float distance = 1;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // float angle = 2;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // float width = 3;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // @@protoc_insertion_point(class_scope:Cone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float distance_;
  float angle_;
  float width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cones_2eproto;
};
// -------------------------------------------------------------------

class ConeList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConeList) */ {
 public:
  inline ConeList() : ConeList(nullptr) {};
  virtual ~ConeList();

  ConeList(const ConeList& from);
  ConeList(ConeList&& from) noexcept
    : ConeList() {
    *this = ::std::move(from);
  }

  inline ConeList& operator=(const ConeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConeList& operator=(ConeList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConeList* internal_default_instance() {
    return reinterpret_cast<const ConeList*>(
               &_ConeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConeList& a, ConeList& b) {
    a.Swap(&b);
  }
  inline void Swap(ConeList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConeList* New() const final {
    return CreateMaybeMessage<ConeList>(nullptr);
  }

  ConeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConeList& from);
  void MergeFrom(const ConeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConeList";
  }
  protected:
  explicit ConeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cones_2eproto);
    return ::descriptor_table_cones_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConesFieldNumber = 1,
  };
  // repeated .Cone landmarks = 1;
  int cones_size() const;
  private:
  int _internal_cones_size() const;
  public:
  void clear_cones();
  ::Cone* mutable_cones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cone >*
      mutable_cones();
  private:
  const ::Cone& _internal_cones(int index) const;
  ::Cone* _internal_add_cones();
  public:
  const ::Cone& cones(int index) const;
  ::Cone* add_cones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cone >&
      cones() const;

  // @@protoc_insertion_point(class_scope:ConeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cone > cones_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cones_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cone

// float distance = 1;
inline void Cone::clear_distance() {
  distance_ = 0;
}
inline float Cone::_internal_distance() const {
  return distance_;
}
inline float Cone::distance() const {
  // @@protoc_insertion_point(field_get:Cone.distance)
  return _internal_distance();
}
inline void Cone::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void Cone::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:Cone.distance)
}

// float angle = 2;
inline void Cone::clear_angle() {
  angle_ = 0;
}
inline float Cone::_internal_angle() const {
  return angle_;
}
inline float Cone::angle() const {
  // @@protoc_insertion_point(field_get:Cone.angle)
  return _internal_angle();
}
inline void Cone::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void Cone::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:Cone.angle)
}

// float width = 3;
inline void Cone::clear_width() {
  width_ = 0;
}
inline float Cone::_internal_width() const {
  return width_;
}
inline float Cone::width() const {
  // @@protoc_insertion_point(field_get:Cone.width)
  return _internal_width();
}
inline void Cone::_internal_set_width(float value) {
  
  width_ = value;
}
inline void Cone::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Cone.width)
}

// -------------------------------------------------------------------

// ConeList

// repeated .Cone landmarks = 1;
inline int ConeList::_internal_cones_size() const {
  return cones_.size();
}
inline int ConeList::cones_size() const {
  return _internal_cones_size();
}
inline void ConeList::clear_cones() {
  cones_.Clear();
}
inline ::Cone* ConeList::mutable_cones(int index) {
  // @@protoc_insertion_point(field_mutable:ConeList.landmarks)
  return cones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cone >*
ConeList::mutable_cones() {
  // @@protoc_insertion_point(field_mutable_list:ConeList.landmarks)
  return &cones_;
}
inline const ::Cone& ConeList::_internal_cones(int index) const {
  return cones_.Get(index);
}
inline const ::Cone& ConeList::cones(int index) const {
  // @@protoc_insertion_point(field_get:ConeList.landmarks)
  return _internal_cones(index);
}
inline ::Cone* ConeList::_internal_add_cones() {
  return cones_.Add();
}
inline ::Cone* ConeList::add_cones() {
  // @@protoc_insertion_point(field_add:ConeList.landmarks)
  return _internal_add_cones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Cone >&
ConeList::cones() const {
  // @@protoc_insertion_point(field_list:ConeList.landmarks)
  return cones_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cones_2eproto
